#include <cmath>
#include <iostream>
#include <string>

const long long powers[10][20] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},  // 0
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},  // 1
    {2,     4,     8,      16,     32,     64,     128,
     256,   512,   1024,   2048,   4096,   8192,   16384,
     32768, 65536, 131072, 262144, 524288, 1048576},  // 2
    {3,        9,        27,        81,        243,        729,       2187,
     6561,     19683,    59049,     177147,    531441,     1594323,   4782969,
     14348907, 43046721, 129140163, 387420489, 1162261467, 3486784401},  // 3
    {4,          16,          64,          256,          1024,
     4096,       16384,       65536,       262144,       1048576,
     4194304,    16777216,    67108864,    268435456,    1073741824,
     4294967296, 17179869184, 68719476736, 274877906944, 1099511627776},  // 4
    {5,
     25,
     125,
     625,
     3125,
     15625,
     78125,
     390625,
     1953125,
     9765625,
     48828125,
     244140625,
     1220703125,
     6103515625,
     30517578125,
     152587890625,
     762939453125,
     3814697265625,
     19073486328125,
     95367431640625},  // 5
    {6,
     36,
     216,
     1296,
     7776,
     46656,
     279936,
     1679616,
     10077696,
     60466176,
     362797056,
     2176782336,
     13060694016,
     78364164096,
     470184984576,
     2821109907456,
     16926659444736,
     101559956668416,
     609359740010496,
     3656158440062976},  // 6
    {7,
     49,
     343,
     2401,
     16807,
     117649,
     823543,
     5764801,
     40353607,
     282475249,
     1977326743,
     13841287201,
     96889010407,
     678223072849,
     4747561509943,
     33232930569601,
     232630513987207,
     1628413597910449,
     11398895185373143,
     79792266297612001},  // 7
    {8,
     64,
     512,
     4096,
     32768,
     262144,
     2097152,
     16777216,
     134217728,
     1073741824,
     8589934592,
     68719476736,
     549755813888,
     4398046511104,
     35184372088832,
     281474976710656,
     2251799813685248,
     18014398509481984,
     144115188075855872,
     1152921504606846976},  // 8
    {9,
     81,
     729,
     6561,
     59049,
     531441,
     4782969,
     43046721,
     387420489,
     3486784401,
     31381059609,
     282429536481,
     2541865828329,
     22876792454961,
     205891132094649,
     1853020188851841,
     16677181699666569,
     150094635296999121,
     1350851717672992089,
     1350851717672992089}  // 9
};

void intro() {
  std::cout << "=== Задание 7. Выполнил Колесников Антон Сергеевич==="
            << std::endl;
  std::cout << "Эта программа выводит все числа Армстронга, меньше введённого "
               "числа x, при этом минимальное значение x --- 154"
            << std::endl;
  std::cout << "*Введите 0 чтобы выйти в любой момент выполнения программы*\n"
            << std::endl;
}

int correctInputx() {
  std::cout << "Введите число x " << std::endl;
  double x = 0;
  bool error = false;
  bool incorrectInput = false;
  do {
    error = false;
    incorrectInput = false;
    std::cin >> x;
    if (std::cin.fail()) {
      std::cin.clear();
      std::cout << "Некорректный ввод. Введите число x" << std::endl;
      std::cin.ignore(1000000, '\n');
      error = true;
      incorrectInput = true;
    }
    if (x < 1 && x > 1e9 && x != 0 && error == false) {
      std::cout << "Некорректный ввод. Введите число x " << std::endl;
      incorrectInput = true;
    }
  } while (incorrectInput);
  return x;
}

int countDigits(int y) {
  int numOfDigits = 1;
  int NewNum = y;
  for (int i = 1; NewNum >= 1; ++i) {
    NewNum = NewNum / 10;
    numOfDigits = i;
  }
  return numOfDigits;
}

bool checkIfArmstrong(int x) {
  int sum = 0;
  int numOfDigits = countDigits(x);
  std::string strX = std::to_string(x);
  int d = 0;
  for (char digit : strX) {
    d = digit - '0';
    sum += powers[d][numOfDigits - 1];
  }
  return sum == x;
}

int findNum(double x) {
  std::cout << "Числа Армстронга:" << '\n';
  for (int num = 1; num < x; ++num) {
    if (checkIfArmstrong(num)) {
      std::cout << num << '\n';
    }
  }
  return 0;
}

int main() {
  intro();
  while (true) {
    double x = correctInputx();
    if (x == 0) {
      break;
    }
    findNum(x);
  }
  return 0;
}